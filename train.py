# -*- coding: utf-8 -*-
"""train.py

Automatically generated by Colaboratory.

NOTE: This script was based off Tinz Tanim Youtube video: https://www.youtube.com/watch?v=Enysj0IVEno


"""

# Imports
import numpy as np
import os

from tflite_model_maker.config import ExportFormat, QuantizationConfig
from tflite_model_maker import model_spec
from tflite_model_maker import object_detector

from tflite_support import metadata

import tensorflow as tf
assert tf.__version__.startswith('2')

tf.get_logger().setLevel('ERROR')
from absl import logging
logging.set_verbosity(logging.ERROR)

# Confirm TF Version
print("\nTensorflow Version:")
print(tf.__version__)
print()

# Config
EPOCHS = 250
BATCH_SIZE = 10

label_map = {1: 'ball', 
             2: 'player', 
             3: 'goalkeeper', 
             4: 'referee'}

# Load Dataset
train_data = object_detector.DataLoader.from_pascal_voc(
    images_dir='/content/drive/MyDrive/Datasets/soccer_players_detection.voc/train',
    annotations_dir='/content/drive/MyDrive/Datasets/soccer_players_detection.voc/train',
    label_map=label_map
)

val_data = object_detector.DataLoader.from_pascal_voc(
    images_dir='/content/drive/MyDrive/Datasets/soccer_players_detection.voc/valid',
    annotations_dir='/content/drive/MyDrive/Datasets/soccer_players_detection.voc/valid',
    label_map=label_map
)

test_data = object_detector.DataLoader.from_pascal_voc(
    images_dir='/content/drive/MyDrive/Datasets/soccer_players_detection.voc/test',
    annotations_dir='/content/drive/MyDrive/Datasets/soccer_players_detection.voc/test',
    label_map=label_map
)

# Load model spec
spec = model_spec.get('efficientdet_lite0')

# Train the model
model = object_detector.create(train_data, 
                               model_spec=spec, 
                               validation_data=val_data, 
                               epochs=EPOCHS, 
                               batch_size=BATCH_SIZE, 
                               train_whole_model=True)

# Evaluate the original model
eval_result = model.evaluate(test_data)

# Print Metrics
print("Final Metrics (Original Model):")
for label, metric_value in eval_result.items():
    print(f"{label}: {metric_value}")

# Add a line break after all the items have been printed
print()

TFLITE_FILENAME = 'soccer_model.tflite'
LABELS_FILENAME = 'soccer_model_labels.txt'

# Export the model
model.export(export_dir='.', 
             tflite_filename=TFLITE_FILENAME, 
             label_filename=LABELS_FILENAME,
             export_format=[ExportFormat.TFLITE, ExportFormat.LABEL])

# Evaluate the exported tflite model to compare to original
eval_result_tflite = model.evaluate_tflite('soccer_model.tflite', test_data)

# Print Metrics
print("Final Metrics (tflite Model):")
for label_tflite, metric_value_tflite in eval_result_tflite.items():
    print(f"{label_tflite}: {metric_value_tflite}")

